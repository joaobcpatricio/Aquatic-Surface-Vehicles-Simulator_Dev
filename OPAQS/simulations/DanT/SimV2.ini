[General]
network = NetworkTormV2

# simulation control parameters
sim-time-limit = 10s#10s#time of simulation
repeat = 1

# RNG initialization (Commons RNG provides generators of "pseudo-randomness", i.e. the generators produce deterministic sequences of bytes)
num-rngs = 4
seed-0-mt = 128 # reserved for general use
seed-1-mt = 128 # reserved for application
seed-2-mt = 128 # reserved for forwarding
seed-3-mt = 128 # reserved for mobility



# statistic collection
**.vector-recording = true
**.scalar-recording = true
**.statistic-recording = true

# network parameters
#**.numNodes = ${2,3,4}
**.numNodes = 2		# number of nodes


# all other layers are configured to default parameter values. Uncomment and change, if needed.

# APPLICATION layer (herald)
**.application.usedRNG = 1
**.application.dataGenerationInterval = 1ms # period that a data message is generated
**.application.dataSizeInBytes = 10#64#10	# size of the generated data
**.application.ttl = 999999s # never expires - defines when data time expires (is verified in storage) - define the same value down in NeighboringLayer.max_age; and RoutingLayer
#**.application.nodeGenMsg=0		#Node nº that generates de msg --> no longer used--------------------------*
**application.destinationAddr="Wf:00:00:00:00:02"	#Default destination of the generated msg (GW)
**application.destinationBTAddr="Bt:00:00:00:00:02"	#Default destination of the generated msg (GW)
**application.nodesThatGen = true	#indicate if the following nodes are the ones that generate data (true) or that don't (false)
**application.nodesGenMsg="0"	# list of nodes that generate (true) or not (false) data
**application.startMultipleMsg = true
**application.numMultipleMsg = 100
**application.hopsListSize = 50 # maximum number of hops Addr a DataMsg can save
**.application.endGeneratingMsg = 999999s	#when it stops generating messages

# ROUTING layer parameters
**.routingLayer = "RoutingLqeGw"#"RoutingLQE"#"RoutingLayer"#"EpidemicRoutingLayer"#	# routing protocol file name
**.routing.maximumCacheSize = 5000byte # 500 KB cache # maximum size of cache/storage ---------------*
**.routing.maximumHopCount = 25		# maximum number of hops of a msg
**.routing.useTTL = false	#If true it ages data in cache (time to leave)
**.routing.waitBFsend=0.5	#Time to wait after receving a DataMsg to start sending DataMsgs to others (it gives time for uptade its cache before starting just sending)
**.routing.max_age=999999s	#max time message is kept alive
**.routing.gateway_list="Wf:00:00:00:00:02;0|."#"Wf:00:00:00:00:02;5|Wf:00:00:00:00:03;9|Wf:00:00:00:00:01;0|." #list of Addr of GW per time;
**.routing.actual_gateway="Wf:00:00:00:00:02" #Gateway by default 
**.routing.gwCheckPeriod=5s


# NEIGHBORING layer parameters (these times take care of neighboring synchronization and periodicity of sending beacons
**.neighboring.antiEntropyInterval = 500ms#200#300s        #time before syncing again - periodicity of beacons
**.neighboring.maximumRandomBackoffDuration = 1s	#Time to start the simulation - a backOffTime
**.neighboring.delayPerDataMsg = 0.1 # estimation of 100ms of delay per data message
**neighboring.usedRNG = 2
**.neighboring.GWAddr = "Wf:00:00:00:00:02" #GW --> outdated-futuramente será aqui inserida a lista de GWs--------------------------------*
**.neighboring.sendWifiFirst = true#false		#by default sends beacons through wifi
**.neighboring.maxLengthGraph=20	#number max of Vertices of the Graph - ALSO DECLARE this on GraphT.h at "V"
**.neighboring.max_age=999999s	#max time message is kept alive
**.neighboring.max_absent_time = 1s #should be the double time of beacon period or more, never less than 1.1Period of beacon
#**.neighboring.maximumNoVert = 20;	# Maxmimum number of graph vertices

# storage layer parameters
#**.storage.maximumCacheSize=5000byte	# Maximum size of the storage (cache)

# WIRELESS interface parameters
**.wirelessIfc.wirelessRange = 40m#15m#30m
**.wirelessIfc.neighbourScanInterval = 50ms#500ms	#updates the list of neighbours on the interface
**.wirelessIfc.bandwidthBitRate = 100000bps # 100 Kbps
**.wirelessIfc.wirelessHeaderSize = 32byte #802.11 a/b/c header  #16byte # BT header
**.wirelessIfc.minSSI=-90
**.wirelessIfc.limitQueueTime=400ms	#Should be equal or less to the period of sending beacons (antiEntropyInterval)
**.wirelessIfc.my_limit_rate = 0bps # The bitrate I impose besides the  wireless bitrate -> if 0, it doesn't limit

# BLUETOOTH interface parameters
**.bluetoothIfc.wirelessRange = 40m#15m#30m
**.bluetoothIfc.neighbourScanInterval = 100ms#500ms
**.bluetoothIfc.bandwidthBitRate = 100000bps # 100 Kbps (max 180kbps neighboring for bitrate)
**.bluetoothIfc.wirelessHeaderSize =16byte #802.11 a/b/c header  #16byte # BT header
**.bluetoothIfc.minSSI=-90



# INET mobility parameters (BonnMotion)
**.mobilityType = "BonnMotionMobility"
**.mobility.traceFile = "paths/Moves2.movements"
**.mobility.is3D = false
**.mobility.nodeId = -1  #means "host module's index"


#CONFIGURATIONS 

[Config A1]
**.mobility.traceFile = "paths/A.movements"
# network parameters
#**.numNodes = ${2,3}
sim-time-limit =  50s
**.numNodes = 3
**.wirelessIfc.wirelessRange = 40m#25m
**.bluetoothIfc.wirelessRange = 40m#25m
#sim-time-limit =  80s
#**application.nodesGenMsg="0,1"	# list of nodes that generate (true) or not (false) data

[Config A2]
**.mobility.traceFile = "paths/A.movements"
# network parameters
#**.numNodes = ${2,3}
**.numNodes = 3
**.wirelessIfc.wirelessRange = 30m#25m
**.bluetoothIfc.wirelessRange = 30m#25m
sim-time-limit =  50s
**application.destinationAddr="Wf:00:00:00:00:02"	#Default destination of the generated msg (GW)
**application.destinationBTAddr="Bt:00:00:00:00:02"	#Default destination of the generated msg (GW)
**application.nodesThatGen = true	#indicate if the following nodes are the ones that generate data (true) or that don't (false)
**application.nodesGenMsg="0,1"	# list of nodes that generate (true) or not (false) data
**application.startMultipleMsg = true
**application.numMultipleMsg = 100
**application.hopsListSize = 50 # maximum number of hops Addr a DataMsg can save

**.routingLayer = "EpidemicRoutingLayer"#"RoutingLqeGw"#"RoutingLQE"#"RoutingLayer"#"EpidemicRoutingLayer"#	# routing protocol file name



[Config B]
**.mobility.traceFile = "paths/B.movements"
# network parameters
**.numNodes = 4
sim-time-limit =  80s#80s
**.wirelessIfc.wirelessRange = 40m#35m
**.bluetoothIfc.wirelessRange = 40m#35m
**application.destinationAddr="Wf:00:00:00:00:02"	#Default destination of the generated msg (GW)
**application.destinationBTAddr="Bt:00:00:00:00:02"	#Default destination of the generated msg (GW)
**application.nodesThatGen = true	#indicate if the following nodes are the ones that generate data (true) or that don't (false)
**application.nodesGenMsg="0,1"	# list of nodes that generate (true) or not (false) data
**application.startMultipleMsg = true
**application.numMultipleMsg = 100
**application.hopsListSize = 50 # maximum number of hops Addr a DataMsg can save

[Config C]
**.mobility.traceFile = "paths/C.movements"
**.numNodes = 4
**.wirelessIfc.wirelessRange = 40m
**.bluetoothIfc.wirelessRange = 40m
sim-time-limit =  170s#270s


# application layer (herald)
**.application.usedRNG = 1
**.application.dataGenerationInterval = 1s # period that a data message is generated
**.application.dataSizeInBytes = 10#64#10	# size of the generated data
**.application.ttl = 999999s # never expires - defines when data time expires (is verified in storage) - define the same value down in NeighboringLayer.max_age; and RoutingLayer
#**.application.nodeGenMsg=0		#Node nº that generates de msg --> no longer used--------------------------*
**application.destinationAddr="Wf:00:00:00:00:02"	#Default destination of the generated msg (GW)
**application.destinationBTAddr="Bt:00:00:00:00:02"	#Default destination of the generated msg (GW)
**application.nodesThatGen = true	#indicate if the following nodes are the ones that generate data (true) or that don't (false)
**application.nodesGenMsg="0,1,3"	# list of nodes that generate (true) or not (false) data
**application.startMultipleMsg = false#true
**application.numMultipleMsg = 100
**application.hopsListSize = 50 # maximum number of hops Addr a DataMsg can save
**.application.endGeneratingMsg = 90s	#when it stops generating messages

[Config D]
**.mobility.traceFile = "paths/D.movements"
**.numNodes = 3
**.wirelessIfc.wirelessRange = 40m
**.bluetoothIfc.wirelessRange = 40m
sim-time-limit =  90s#270s
# application layer (herald)
**.application.usedRNG = 1
**.application.dataGenerationInterval = 1s # period that a data message is generated
**.application.dataSizeInBytes = 10#64#10	# size of the generated data
**.application.ttl = 999999s # never expires - defines when data time expires (is verified in storage) - define the same value down in NeighboringLayer.max_age; and RoutingLayer
#**.application.nodeGenMsg=0		#Node nº that generates de msg --> no longer used--------------------------*
**application.destinationAddr="Wf:00:00:00:00:02"	#Default destination of the generated msg (GW)
**application.destinationBTAddr="Bt:00:00:00:00:02"	#Default destination of the generated msg (GW)
**application.nodesThatGen = true	#indicate if the following nodes are the ones that generate data (true) or that don't (false)
**application.nodesGenMsg="0,1"	# list of nodes that generate (true) or not (false) data
**application.startMultipleMsg = false#true
**application.numMultipleMsg = 100
**application.hopsListSize = 50 # maximum number of hops Addr a DataMsg can save
**.application.endGeneratingMsg = 90s	#when it stops generating messages

[Config Agw]
**.mobility.traceFile = "paths/Agw.movements"
# network parameters
#**.numNodes = ${2,3}
**.numNodes = 6
**.wirelessIfc.wirelessRange = 40m#25m
**.bluetoothIfc.wirelessRange = 40m#25m
sim-time-limit =  50s
**application.destinationAddr="Wf:00:00:00:00:02"	#Default destination of the generated msg (GW)
**application.destinationBTAddr="Bt:00:00:00:00:02"	#Default destination of the generated msg (GW)
**application.nodesThatGen = true	#indicate if the following nodes are the ones that generate data (true) or that don't (false)
**application.nodesGenMsg="0,1,2,3,4,5"	# list of nodes that generate (true) or not (false) data
**application.startMultipleMsg = true
**application.numMultipleMsg = 100
**application.hopsListSize = 50 # maximum number of hops Addr a DataMsg can save

# ROUTING layer parameters
**.routingLayer = "RoutingLqeGw"#"RoutingLQE"#"RoutingLayer"#"EpidemicRoutingLayer"#	# routing protocol file name
**.routing.maximumCacheSize = 5000byte # 500 KB cache # maximum size of cache/storage ---------------*
**.routing.maximumHopCount = 25		# maximum number of hops of a msg
**.routing.useTTL = false	#If true it ages data in cache (time to leave)
**.routing.waitBFsend=0.5	#Time to wait after receving a DataMsg to start sending DataMsgs to others (it gives time for uptade its cache before starting just sending)
**.routing.max_age=999999s	#max time message is kept alive
**.routing.gateway_list=""#"Wf:00:00:00:00:02;0|."#"Wf:00:00:00:00:02;5|Wf:00:00:00:00:03;9|Wf:00:00:00:00:01;0|." #list of Addr of GW per time;
**.routing.actual_gateway="" #Gateway by default 
**.routing.gwCheckPeriod=5s

[Config Bgw]
**.mobility.traceFile = "paths/Bgw.movements"
# network parameters
**.numNodes = 3
**.wirelessIfc.wirelessRange = 40m#25m
**.bluetoothIfc.wirelessRange = 40m#25m
sim-time-limit =  50s
# application layer (herald)
**.application.usedRNG = 1
**.application.dataGenerationInterval = 1s # period that a data message is generated
**.application.dataSizeInBytes = 10#64#10	# size of the generated data
**.application.ttl = 999999s # never expires - defines when data time expires (is verified in storage) - define the same value down in NeighboringLayer.max_age; and RoutingLayer
#**.application.nodeGenMsg=0		#Node nº that generates de msg --> no longer used--------------------------*
**application.nodesThatGen = true	#indicate if the following nodes are the ones that generate data (true) or that don't (false)
**application.nodesGenMsg="0,1,2"	# list of nodes that generate (true) or not (false) data
**application.startMultipleMsg = false#true
**application.numMultipleMsg = 100
**application.hopsListSize = 50 # maximum number of hops Addr a DataMsg can save
**.application.endGeneratingMsg = 90s	#when it stops generating messages
# ROUTING layer parameters
**.routingLayer = "RoutingLqeGw"#"RoutingLQE"#"RoutingLayer"#"EpidemicRoutingLayer"#	# routing protocol file name
**.routing.maximumCacheSize = 5000byte # 500 KB cache # maximum size of cache/storage ---------------*
**.routing.maximumHopCount = 25		# maximum number of hops of a msg
**.routing.useTTL = false	#If true it ages data in cache (time to leave)
**.routing.waitBFsend=0.5	#Time to wait after receving a DataMsg to start sending DataMsgs to others (it gives time for uptade its cache before starting just sending)
**.routing.max_age=999999s	#max time message is kept alive
**.routing.gateway_list=""#"Wf:00:00:00:00:02;0|."#"Wf:00:00:00:00:02;5|Wf:00:00:00:00:03;9|Wf:00:00:00:00:01;0|." #list of Addr of GW per time;
**.routing.actual_gateway="" #Gateway by default 
**.routing.gwCheckPeriod=5s

[Config Cgw]
**.mobility.traceFile = "paths/Cgw.movements"
# network parameters
**.numNodes = 4
sim-time-limit =  100s
# application layer (herald)
**.application.usedRNG = 1
**.application.dataGenerationInterval = 1s # period that a data message is generated
**.application.dataSizeInBytes = 10#64#10	# size of the generated data
**.application.ttl = 999999s # never expires - defines when data time expires (is verified in storage) - define the same value down in NeighboringLayer.max_age; and RoutingLayer
#**.application.nodeGenMsg=0		#Node nº that generates de msg --> no longer used--------------------------*
**application.nodesThatGen = true	#indicate if the following nodes are the ones that generate data (true) or that don't (false)
**application.nodesGenMsg="0,1,2,3"	# list of nodes that generate (true) or not (false) data
**application.startMultipleMsg = false#true
**application.numMultipleMsg = 100
**application.hopsListSize = 50 # maximum number of hops Addr a DataMsg can save
**.application.endGeneratingMsg = 90s	#when it stops generating messages
# ROUTING layer parameters
**.routingLayer = "RoutingLqeGw"#"RoutingLQE"#"RoutingLayer"#"EpidemicRoutingLayer"#	# routing protocol file name
**.routing.maximumCacheSize = 5000byte # 500 KB cache # maximum size of cache/storage ---------------*
**.routing.maximumHopCount = 25		# maximum number of hops of a msg
**.routing.useTTL = false	#If true it ages data in cache (time to leave)
**.routing.waitBFsend=0.5	#Time to wait after receving a DataMsg to start sending DataMsgs to others (it gives time for uptade its cache before starting just sending)
**.routing.max_age=999999s	#max time message is kept alive
**.routing.gateway_list=""#"Wf:00:00:00:00:02;0|."#"Wf:00:00:00:00:02;5|Wf:00:00:00:00:03;9|Wf:00:00:00:00:01;0|." #list of Addr of GW per time;
**.routing.actual_gateway="" #Gateway by default 
**.routing.gwCheckPeriod=5s

[Config Dgw]
**.mobility.traceFile = "paths/Dgw.movements"
# network parameters
**.numNodes = 4
sim-time-limit =  100s
# application layer (herald)
**.application.usedRNG = 1
**.application.dataGenerationInterval = 1s # period that a data message is generated
**.application.dataSizeInBytes = 10#64#10	# size of the generated data
**.application.ttl = 999999s # never expires - defines when data time expires (is verified in storage) - define the same value down in NeighboringLayer.max_age; and RoutingLayer
#**.application.nodeGenMsg=0		#Node nº that generates de msg --> no longer used--------------------------*
**application.nodesThatGen = true	#indicate if the following nodes are the ones that generate data (true) or that don't (false)
**application.nodesGenMsg="0,1,2,3"	# list of nodes that generate (true) or not (false) data
**application.startMultipleMsg = false#true
**application.numMultipleMsg = 100
**application.hopsListSize = 50 # maximum number of hops Addr a DataMsg can save
**.application.endGeneratingMsg = 90s	#when it stops generating messages
# ROUTING layer parameters
**.routingLayer = "RoutingLqeGw"#"RoutingLQE"#"RoutingLayer"#"EpidemicRoutingLayer"#	# routing protocol file name
**.routing.maximumCacheSize = 5000byte # 500 KB cache # maximum size of cache/storage ---------------*
**.routing.maximumHopCount = 25		# maximum number of hops of a msg
**.routing.useTTL = false	#If true it ages data in cache (time to leave)
**.routing.waitBFsend=0.5	#Time to wait after receving a DataMsg to start sending DataMsgs to others (it gives time for uptade its cache before starting just sending)
**.routing.max_age=999999s	#max time message is kept alive
**.routing.gateway_list=""#"Wf:00:00:00:00:02;0|."#"Wf:00:00:00:00:02;5|Wf:00:00:00:00:03;9|Wf:00:00:00:00:01;0|." #list of Addr of GW per time;
**.routing.actual_gateway="" #Gateway by default 
**.routing.gwCheckPeriod=5s

[Config Egw]
**.mobility.traceFile = "paths/Egw.movements"
# network parameters
**.numNodes = 4
sim-time-limit =  100s
# application layer (herald)
**.application.usedRNG = 1
**.application.dataGenerationInterval = 1s # period that a data message is generated
**.application.dataSizeInBytes = 10#64#10	# size of the generated data
**.application.ttl = 999999s # never expires - defines when data time expires (is verified in storage) - define the same value down in NeighboringLayer.max_age; and RoutingLayer
#**.application.nodeGenMsg=0		#Node nº that generates de msg --> no longer used--------------------------*
**application.nodesThatGen = true	#indicate if the following nodes are the ones that generate data (true) or that don't (false)
**application.nodesGenMsg="0,1,2,3"	# list of nodes that generate (true) or not (false) data
**application.startMultipleMsg = false#true
**application.numMultipleMsg = 100
**application.hopsListSize = 50 # maximum number of hops Addr a DataMsg can save
**.application.endGeneratingMsg = 99999s	#when it stops generating messages
# ROUTING layer parameters
**.routingLayer = "RoutingLqeGw"#"RoutingLQE"#"RoutingLayer"#"EpidemicRoutingLayer"#	# routing protocol file name
**.routing.maximumCacheSize = 5000byte # 500 KB cache # maximum size of cache/storage ---------------*
**.routing.maximumHopCount = 25		# maximum number of hops of a msg
**.routing.useTTL = false	#If true it ages data in cache (time to leave)
**.routing.waitBFsend=0.5	#Time to wait after receving a DataMsg to start sending DataMsgs to others (it gives time for uptade its cache before starting just sending)
**.routing.max_age=999999s	#max time message is kept alive
**.routing.gateway_list=""#"Wf:00:00:00:00:02;0|."#"Wf:00:00:00:00:02;5|Wf:00:00:00:00:03;9|Wf:00:00:00:00:01;0|." #list of Addr of GW per time;
**.routing.actual_gateway="" #Gateway by default 
**.routing.gwCheckPeriod=5s
